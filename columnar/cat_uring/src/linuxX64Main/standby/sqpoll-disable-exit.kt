// https://syzkaller.appspot.com/bug?id=99f4ea77bb9b9ef24cefb66469be319f4aa9f162
// autogenerated by syzkaller (https://github.com/google/syzkaller)

#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/prctl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

#include "liburing.h"
#include "../src/syscall.h"

static void sleep_ms(ms:uint64_t) {
    usleep(ms * 1000);
}

static current_time_ms:uint64_t(void) {
    ts:timespec;
    if (clock_gettime(CLOCK_MONOTONIC, ts.ptr))
        exit(1);
    return (uint64_t) ts.tv_sec * 1000 + (uint64_t) ts.tv_nsec / 1000000;
}

static write_file:Boolean(file:String, const what:CPointer<ByteVar>, ...) {
    char buf[1024];
    va_list args;
    va_start(args, what);
    vsnprintf(buf, sizeof(buf), what, args);
    va_end(args);
    buf[sizeof(buf) - 1] = 0;
    len:Int = strlen(buf);
    fd:Int = open(file,  O_WRONLY or O_CLOEXEC );
    if (fd == -1)
        return false;
    if (write(fd, buf, len) != len) {
        err:Int = errno;
        close(fd);
        errno = err;
        return false;
    }
    close(fd);
    return true;
}

#define SIZEOF_IO_URING_SQE 64
#define SIZEOF_IO_URING_CQE 16
#define SQ_HEAD_OFFSET 0
#define SQ_TAIL_OFFSET 64
#define SQ_RING_MASK_OFFSET 256
#define SQ_RING_ENTRIES_OFFSET 264
#define SQ_FLAGS_OFFSET 276
#define SQ_DROPPED_OFFSET 272
#define CQ_HEAD_OFFSET 128
#define CQ_TAIL_OFFSET 192
#define CQ_RING_MASK_OFFSET 260
#define CQ_RING_ENTRIES_OFFSET 268
#define CQ_RING_OVERFLOW_OFFSET 284
#define CQ_FLAGS_OFFSET 280
#define CQ_CQES_OFFSET 320

static :Longsyz_io_uring_setupvolatile :Longa0 volatile :Longa1
                               volatile :Longa2 volatile :Longa3
                               volatile :Longa4 volatile :Longa5 {
    entries:uint32_t = (uint32_t) a0;
    setup_params:CPointer<io_uring_params> = (s:io_uring_param *) a1;
    vma1:CPointer<ByteVar>  = (void *) a2;
    vma2:CPointer<ByteVar>  = (void *) a3;
    void **ring_ptr_out = (void **) a4;
    void **sqes_ptr_out = (void **) a5;
    fd_io_uring:uint32_t = __sys_io_uring_setup(entries, setup_params);
    sq_ring_sz:uint32_t =
 setup_params.pointed.sq_off .array + setup_params.pointed.sq_entries  * sizeof(uint32_t);
    cq_ring_sz:uint32_t = setup_params.pointed.cq_off .cqes +
 setup_params.pointed.cq_entries  * SIZEOF_IO_URING_CQE;
    ring_sz:uint32_t = sq_ring_sz > cq_ring_sz ? sq_ring_sz : cq_ring_sz;
    *ring_ptr_out = mmap(vma1, ring_sz,  PROT_READ or PROT_WRITE ,
                          MAP_SHARED or  MAP_POPULATE or MAP_FIXED , fd_io_uring,
                         IORING_OFF_SQ_RING);
    sqes_sz:uint32_t = setup_params.pointed.sq_entries  * SIZEOF_IO_URING_SQE;
    *sqes_ptr_out =
            mmap(vma2, sqes_sz,  PROT_READ or PROT_WRITE ,
                  MAP_SHARED or  MAP_POPULATE or MAP_FIXED , fd_io_uring, IORING_OFF_SQES);
    return fd_io_uring;
}

static void kill_and_wait(pid:Int, int *status) {
    kill(-pid, SIGKILL);
    kill(pid, SIGKILL);
    for (i/*as int */ in 0 until  100) {
        if (waitpid(-1, status,  WNOHANG or __WALL ) == pid)
            return;
        usleep(1000);
    }
    DIR *dir = opendir("/sys/fs/fuse/connections");
    if (dir) {
        for (;;) {
            ent:CPointer<dirent> = readdir(dir);
            if (!ent)
                break;
            if (strcmp( ent.pointed.d_name , ".") == 0 || strcmp( ent.pointed.d_name , "..") == 0)
                continue;
            char abort[300];
            snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort",
 ent.pointed.d_name );
            fd:Int = open(abort, O_WRONLY);
            if (fd == -1) {
                continue;
            }
            if (write(fd, abort, 1) < 0) {
            }
            close(fd);
        }
        closedir(dir);
    } else {
    }
    while (waitpid(-1, status, __WALL) != pid) {
    }
}

static void setup_test() {
    prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
    setpgrp();
    write_file("/proc/self/oom_score_adj", "1000");
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void) {
    iter:Int = 0;
    for (; iter < 100; iter++) {
        pid:Int = fork();
        if (pid < 0)
            exit(1);
        if (pid == 0) {
            setup_test();
            execute_one();
            exit(0);
        }
        status:Int = 0;
        start:uint64_t = current_time_ms();
        for (;;) {
            if (waitpid(-1, status.ptr,  WNOHANG or WAIT_FLAGS ) == pid)
                break;
            sleep_ms(1);
            if (current_time_ms() - start < 5000) {
                continue;
            }
            kill_and_wait(pid, status.ptr);
            break;
        }
    }
}

fun execute_one(void):Unit{
    *(uint32_t *) 0x20000044 = 0;
    *(uint32_t *) 0x20000048 = 0x42;
    *(uint32_t *) 0x2000004c = 0;
    *(uint32_t *) 0x20000050 = 0;
    *(uint32_t *) 0x20000058 = -1;
    *(uint32_t *) 0x2000005c = 0;
    *(uint32_t *) 0x20000060 = 0;
    *(uint32_t *) 0x20000064 = 0;
    syz_io_uring_setup(0x74bc, 0x20000040, 0x20ffb000, 0x20ffc000, 0, 0);
}

fun main(void):Int{
    mmap((void *) 0x1ffff000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
    mmap((void *) 0x20000000ul, 0x1000000ul, 7ul, 0x32ul, -1, 0ul);
    mmap((void *) 0x21000000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);
    loop();
    return 0;
}
