#headers =   ac.h
#bits/stat.h ac.h
#headerFilter = liburing/* sys/*
compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu
#linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu
---
#include <ctype.h>
#include <fcntl.h>
#include <linux/fs.h>
#include <linux/io_uring.h>
#include <netinet/in.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/uio.h>
#include <unistd.h>

#define CATQUEUE_DEPTH 1
#define BLOCK_SZ    1024

/* This is x86 specific
#define read_barrier()  __asm__ __volatile__("":::"memory")
#define write_barrier() __asm__ __volatile__("":::"memory") */

struct app_io_sq_ring {
    unsigned *head;
    unsigned *tail;
    unsigned *ring_mask;
    unsigned *ring_entries;
    unsigned *flags;
    unsigned *array;
};

struct app_io_cq_ring {
    unsigned *head;
    unsigned *tail;
    unsigned *ring_mask;
    unsigned *ring_entries;
    struct io_uring_cqe *cqes;
};

struct submitter {
    int ring_fd;
    struct app_io_sq_ring sq_ring;
    struct io_uring_sqe *sqes;
    struct app_io_cq_ring cq_ring;
};

struct file_info {
    off_t file_sz;
    struct iovec iovecs[];      /* Referred by readv/writev */
};

 static inline void  read_barrier() { __asm__ __volatile__("" ::: "memory") ;}
 static inline void  write_barrier() { __asm__ __volatile__("" ::: "memory"); }
