#headers =   ac.h
#bits/stat.h ac.h
#headerFilter = liburing/* sys/*
compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu
linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -L/usr/lib -luring
---
#include <stdatomic.h>
#include <ctype.h>
#include <fcntl.h>
#include <linux/fs.h>
#include <linux/io_uring.h>
#include <netinet/in.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/uio.h>
#include <unistd.h>
#include <liburing.h>
#include <errno.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/types.h>

#define CATQUEUE_DEPTH 256
#define BLOCK_SZ    1024

struct file_info {
    off_t file_sz;
    struct iovec iovecs[];      /* Referred by readv/writev */
};

/* This is x86 specific
#define read_barrier()  __asm__ __volatile__("":::"memory")
#define write_barrier() __asm__ __volatile__("":::"memory") */

static inline void  read_barrier() { __asm__ __volatile__("" ::: "memory") ;}
static inline void  write_barrier() { __asm__ __volatile__("" ::: "memory"); }

enum t_setup_ret {
	T_SETUP_OK	= 0,
	T_SETUP_SKIP,
};




#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
